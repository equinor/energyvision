# This workflow runs whenever a pull request in the repository is marked as "ready for review".
name: Move issue/PR to âœ…  Done status
description: 'Move issue'
inputs:
  token:
    description: 'A Github PAT'
    required: true
runs:
  using: 'composite'
  steps:
    # Sets environment variables for this step.
    #
    # If you are using a personal access token, replace `YOUR_TOKEN` with the name of the secret that contains your personal access token.
    #
    # Replace `YOUR_ORGANIZATION` with the name of your organization. For example, `octo-org`.
    #
    # Replace `YOUR_PROJECT_NUMBER` with your project number. To find the project number, look at the project URL. For example, `https://github.com/orgs/octo-org/projects/5` has a project number of 5.
    - name: Get project data
      id: get-project-data
      shell: 'bash'
      env:
        GH_TOKEN: ${{ inputs.token }}
        ORGANIZATION: 'equinor'
        PROJECT_NUMBER: 965
      # Uses [GitHub CLI](https://cli.github.com/manual/) to query the API for the ID of the project and return the name and ID of the first 20 fields in the project. `fields` returns a union and the query uses inline fragments (`... on`) to return information about any `ProjectV2Field` and `ProjectV2SingleSelectField` fields. The response is stored in a file called `project_data.json`.
      run: |
        GH_DEBUG=api gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                repository(name: "energyvision"){
                  id
                  discussionCategory(slug: "Announcements"){
                    id
                  }
                    issues(states:[CLOSED], first:50, orderBy:{
                    field:UPDATED_AT, direction:DESC}){
                       nodes{
                         id

                        projectItems(first:10){
                        nodes{
                         id
                         content{
                         ... on Issue{
                         number
                        title
                        }
                         }
                         fieldValueByName( name: "Status") {
             			      ... on ProjectV2ItemFieldSingleSelectValue {
              			       status: name
           						  }
          		        }
                        }
                       }
                       }
                     }
                     }
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                  
                }
              }
            }
         }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

        echo "ORGANIZATION=${ORGANIZATION}" >> $GITHUB_ENV
        echo "PROJECT_NUMBER=${PROJECT_NUMBER}" >> $GITHUB_ENV

        PROJECT_ID=$(jq '.data.organization.projectV2.id' project_data.json)
        echo "PROJECT_ID=${PROJECT_ID}" >> $GITHUB_ENV

        echo "Project id saved..."

        STATUS_FIELD_ID=$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name=="Status") | .id' project_data.json)
        echo "STATUS_FIELD_ID=${STATUS_FIELD_ID}" >> $GITHUB_ENV
        echo "Status field id saved..."

        DONE_OPTION_ID=$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name=="Status") | .options[] | select(.name=="âœ…  Done") |.id' project_data.json)
        echo "DONE_OPTION_ID=${DONE_OPTION_ID}" >> $GITHUB_ENV
        echo "Done option id saved..."

        DISCUSSION_CATEGORY_ID=$(jq -r '.data.organization.repository.discussionCategory.id' project_data.json)
        echo "DISCUSSION_CATEGORY_ID=${DISCUSSION_CATEGORY_ID}" >> $GITHUB_ENV

        REPOSITORY_ID=$(jq -r '.data.organization.repository.id' project_data.json)
        echo "REPOSITORY_ID=${REPOSITORY_ID}" >> $GITHUB_ENV


        ITEMS_IDS=$(jq -r '.data.organization.repository.issues.nodes[].projectItems.nodes[] | select(.fieldValueByName.status =="ðŸš€ Release") | .id' project_data.json)
        echo "ITEMS_IDS=${ITEMS_IDS}" >> $GITHUB_ENV

        ITEMS=$(jq -r '.data.organization.repository.issues.nodes[].projectItems.nodes[] | select(.fieldValueByName.status =="ðŸš€ Release") | "\(.content.title) #\(.content.number)' project_data.json)
        echo "ITEMS=${ITEMS}" >> $GITHUB_ENV
        echo "ITEMS are saved... $ITEMS $ITEM_IDS"


        echo "Category id saved..."

        echo "done id : $DONE_OPTION_ID"
        echo $PROJECT_ID
        echo "Status field id: $STATUS_FIELD_ID"
        echo "Discussion id: $DISCUSSION_ID"
        echo "Repository id: $REPOSITORY_ID"

    - name: Get all items in status release
      id: items
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      # Get all the items with status "ðŸš€ Release"
      run: |
        # gh project item-list $PROJECT_NUMBER --owner $ORGANIZATION --format=json | jq '.data.organization.projectV2.items.nodes[] | select(.content.__typename == "Issue" and .content.repository.nameWithOwner == "${{ github.repository }} and .fieldvalues.nodes[]|select(.__typename == "ProjectV2ItemFieldSingleSelectValue" and .name == "ðŸš€ Release") ) | {id: .id ,url :.content.url, title: .content.title, number: .content.number}' >> $HOME/items.json

    # #Sets environment variables for this step. Replace `YOUR_TOKEN` with the name of the secret that contains your personal access token.
    - name: Set fields
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}

      # Sets the value of the `Status` field to `âœ…  Done`.
      run: |
        echo "Set value of status field "
        #JSON=$(cat $ITEMS)
        echo "$ITEMS"
        ITEM_IDS=$(jq -s '.[]|.id' $HOME/items.json)
        cat $HOME/items.json
        echo "ITEMs $ITEM_IDS $HOME/items.json "
        for id in $ITEM_IDS; do
         echo "Moving $id $DONE_OPTION_ID"
         gh api graphql -f query='
           mutation (
             $project: ID!
             $item: ID!
             $status_field: ID!
             $status_value: String!
           ) {
             set_status: updateProjectV2ItemFieldValue(input: {
               projectId: $project
               itemId: $item
               fieldId: $status_field
               value: {
                 singleSelectOptionId: $status_value
                 }
             }) {
               projectV2Item {
                 id
                 }
             }
             
           }' -f project=$PROJECT_ID -f item=$id -f status_field=$STATUS_FIELD_ID -f status_value=$DONE_OPTION_ID --silent
           done
    - name: Create discussion
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        TITLE="Release "
        DATE=$(date +'%d-%m-%Y')
        TITLE+=$DATE
        ITEMS=$(jq -r -s '.[] | (.title + "#" + .number )' $HOME/items.json | jq -r 'join("- ")')
        echo "$TITLE"
        echo "$ITEMS" 
        BODY="# Release Log#<br/>" 
        BODY+="## Issues closed<br/>"
        BODY+="$ITEMS" 
        BODY+="<br/>## Commit SHA<br/>"
        BODY+="To be inserted here.."

        echo "$BODY"

        gh api graphql -f query=' 
        mutation($title: String!, $repositoryId: ID!, $categoryId: ID!, $body: String!){
        createDiscussion(input: {
          repositoryId:$repositoryId 
          categoryId:$categoryId
          body:$body
          title:$title
           }) {

        # response type: CreateDiscussionPayload
         discussion {
           id
        }
        }}' -f title="$TITLE" -f repositoryId="$REPOSITORY_ID" -f categoryId="$DISCUSSION_CATEGORY_ID" -f body="$BODY"
