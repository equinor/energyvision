# This workflow runs whenever a pull request in the repository is marked as "ready for review".
name: Move issue/PR to âœ…  Done status
description: 'Move issue'
inputs:
  token:
    description: 'A Github PAT'
    required: true
runs:
  using: 'composite'
  steps:
    # Sets environment variables for this step.
    #
    # If you are using a personal access token, replace `YOUR_TOKEN` with the name of the secret that contains your personal access token.
    #
    # Replace `YOUR_ORGANIZATION` with the name of your organization. For example, `octo-org`.
    #
    # Replace `YOUR_PROJECT_NUMBER` with your project number. To find the project number, look at the project URL. For example, `https://github.com/orgs/octo-org/projects/5` has a project number of 5.
    - name: Get project data
      id: get-project-data
      shell: 'bash'
      env:
        GH_TOKEN: ${{ inputs.token }}
        ORGANIZATION: 'equinor'
        PROJECT_NUMBER: 965
      # Uses [GitHub CLI](https://cli.github.com/manual/) to query the API for the ID of the project and return the name and ID of the first 20 fields in the project. `fields` returns a union and the query uses inline fragments (`... on`) to return information about any `ProjectV2Field` and `ProjectV2SingleSelectField` fields. The response is stored in a file called `project_data.json`.
      run: |
        gh api graphql -f query='
            query($org: String!, $number: Int!) {
            organization(login: $org){
              repository(name:"energyvision"){
                discussionCategory(slug:"Announcements"){
                id
              }
              projectV2(number: $number) {
              id
              fields(first:20) {
                nodes {
                  ... on ProjectV2Field {
                    id
                    name
                }
                  ... on ProjectV2SingleSelectField {
                    id
                    name
                    options {
                      id
                      name
                    }
                  }
                }
              }
              items(first:100){
               nodes{
                id
                fieldValues(first:20){
                nodes{
                  ... on ProjectV2ItemFieldSingleSelectValue
                {
                  name
                }
                }
              }
                fieldValueByName( name: "Status") {
             			    ... on ProjectV2ItemFieldSingleSelectValue {
              			    	status: name
           						     }
          		          }
          }
        }
         }
         }
         }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

        # Parses the response from the API query and stores the relevant IDs as environment variables. Modify this to get the ID for different fields or options. For example:
        #
        # - To get the ID of a field called `Team`, add `echo 'TEAM_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Team") | .id' project_data.json) >> $GITHUB_ENV`.
        # - To get the ID of an option called `Octoteam` for the `Team` single select field, add `echo 'OCTOTEAM_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Team") |.options[] | select(.name=="Octoteam") |.id' project_data.json) >> $GITHUB_ENV`.
        #
        # **Note:** This workflow assumes that you have a project with a single select field called "Status" that includes an option called "âœ…  Done" and a date field called "Date posted". You must modify this section to match the fields that are present in your table.

        echo "ORGANIZATION=${ORGANIZATION}" >> $GITHUB_ENV
        echo "PROJECT_NUMBER=${PROJECT_NUMBER}" >> $GITHUB_ENV

        PROJECT_ID=$(jq '.data.organization.projectV2.id' project_data.json)
        echo "PROJECT_ID=${PROJECT_ID}" >> $GITHUB_ENV

        STATUS_FIELD_ID=$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json)
        echo "STATUS_FIELD_ID=${STATUS_FIELD_ID}" >> $GITHUB_ENV

        DONE_OPTION_ID=$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="âœ…  Done") |.id' project_data.json)
        echo "DONE_OPTION_ID=${DONE_OPTION_ID}" >> $GITHUB_ENV

        DISCUSSION_CATEGORY_ID=$(jq '.data.organization.repository.discussionCategory.id' project_data.json)
        echo "DISCUSSION_CATEGOTY_ID=${DISCUSSION_CATEGORY_ID}" >> $GITHUB_ENV

        echo "done id : $DONE_OPTION_ID"
        echo $PROJECT_ID
        echo "Status field id: $STATUS_FIELD_ID"
        echo "Discussion id: $DISCUSSION_ID"

    - name: Get all items in status release
      id: items
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      # Get all the items with status "ðŸš€ Release"
      run: |
        gh project item-list $PROJECT_NUMBER --owner $ORGANIZATION --format=json | jq '.items[] | select(.status=="ðŸš€ Release" and .content.type == "Issue") | {id: .id ,url :.content.url}' >> $HOME/items.json

    # #Sets environment variables for this step. Replace `YOUR_TOKEN` with the name of the secret that contains your personal access token.
    - name: Set fields
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}

      # Sets the value of the `Status` field to `âœ…  Done`.
      run: |
        echo "Set value of status field "
        ITEM_IDS=$(jq -s '.[]|.id' $HOME/items.json)
        echo "ITEMs $ITEM_IDS "
        for id in $ITEM_IDS; do
         echo "Moving $id $DONE_OPTION_ID"
         GH_DEBUG=api gh api graphql -f query='
           mutation (
             $project: ID!
             $item: ID!
             $status_field: ID!
             $status_value: String!
           ) {
             set_status: updateProjectV2ItemFieldValue(input: {
               projectId: $project
               itemId: $item
               fieldId: $status_field
               value: {
                 singleSelectOptionId: $status_value
                 }
             }) {
               projectV2Item {
                 id
                 }
             }
             
           }' -f project=$PROJECT_ID -f item=$id -f status_field=$STATUS_FIELD_ID -f status_value=$DONE_OPTION_ID --silent
           done
    - name: Create discussion
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        DATE=$(date +'%d-%m-%Y')
        gh api graphql -f query=' 
        mutation($date: String!, $repositoryId: ID!, $categoryId: ID!){
        createDiscussion(input: {repositoryId:$repositoryId , categoryId: , body: "# Release Log ", title: "Release $date"}) {

        # response type: CreateDiscussionPayload
         discussion {
           id
        }
        }}' -f date=$DATE -f repositoryId=${{github.repository_id}} -f categoryId=$DISCUSSION_CATEGORY_ID
