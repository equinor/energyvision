# This workflow runs whenever a pull request in the repository is marked as "ready for review".
name: Move issue/PR to âœ…  Done status
description: 'Move issue'
inputs:
  token:
    description: 'A Github PAT'
    required: true
runs:
  using: 'composite'
  steps:
    # Sets environment variables for this step.
    #
    # If you are using a personal access token, replace `YOUR_TOKEN` with the name of the secret that contains your personal access token.
    #
    # Replace `YOUR_ORGANIZATION` with the name of your organization. For example, `octo-org`.
    #
    # Replace `YOUR_PROJECT_NUMBER` with your project number. To find the project number, look at the project URL. For example, `https://github.com/orgs/octo-org/projects/5` has a project number of 5.
    - name: Get project data
      id: get-project-data
      shell: 'bash'
      env:
        GH_TOKEN: ${{ inputs.token }}
        ORGANIZATION: 'equinor'
        PROJECT_NUMBER: 965
      # Uses [GitHub CLI](https://cli.github.com/manual/) to query the API for the ID of the project and return the name and ID of the first 20 fields in the project. `fields` returns a union and the query uses inline fragments (`... on`) to return information about any `ProjectV2Field` and `ProjectV2SingleSelectField` fields. The response is stored in a file called `project_data.json`.
      run: |
        GH_DEBUG=api gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                repository(name: "energyvision"){
                  discussionCategory(slug: "Announcements"){
                    id
                  }
                }
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                  items(first:100){
                    nodes{
                      id
                      content{
                        title,
                        number
                      }
                      fieldValues(first:20){
                        nodes{
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            name
                          }
                        }
                      }
                      fieldValueByName( name: "Status") {
             			      ... on ProjectV2ItemFieldSingleSelectValue {
              			       status: name
           						  }
          		        }
                    }
                  }
                }
              }
            }
         }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

        echo "ORGANIZATION=${ORGANIZATION}" >> $GITHUB_ENV
        echo "PROJECT_NUMBER=${PROJECT_NUMBER}" >> $GITHUB_ENV

        PROJECT_ID=$(jq '.data.organization.projectV2.id' project_data.json)
        echo "PROJECT_ID=${PROJECT_ID}" >> $GITHUB_ENV

        echo "Project id saved..."

        STATUS_FIELD_ID=$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name=="Status") | .id' project_data.json)
        echo "STATUS_FIELD_ID=${STATUS_FIELD_ID}" >> $GITHUB_ENV
        echo "Status field id saved..."

        DONE_OPTION_ID=$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name=="Status") | .options[] | select(.name=="âœ…  Done") |.id' project_data.json)
        echo "DONE_OPTION_ID=${DONE_OPTION_ID}" >> $GITHUB_ENV
        echo "Done option id saved..."

        DISCUSSION_CATEGORY_ID=$(jq -r '.data.organization.repository.discussionCategory.id' project_data.json)
        echo "DISCUSSION_CATEGOTY_ID=${DISCUSSION_CATEGORY_ID}" >> $GITHUB_ENV
        echo "Category id saved..."

        echo "done id : $DONE_OPTION_ID"
        echo $PROJECT_ID
        echo "Status field id: $STATUS_FIELD_ID"
        echo "Discussion id: $DISCUSSION_ID"

    - name: Get all items in status release
      id: items
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      # Get all the items with status "ðŸš€ Release"
      run: |
        gh project item-list $PROJECT_NUMBER --owner $ORGANIZATION --format=json | jq '.items[] | select(.status=="ðŸš€ Release" and .content.type == "Issue") | {id: .id ,url :.content.url}' >> $HOME/items.json

    # #Sets environment variables for this step. Replace `YOUR_TOKEN` with the name of the secret that contains your personal access token.
    - name: Set fields
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}

      # Sets the value of the `Status` field to `âœ…  Done`.
      run: |
        echo "Set value of status field "
        ITEM_IDS=$(jq -s '.[]|.id' $HOME/items.json)
        echo "ITEMs $ITEM_IDS "
        for id in $ITEM_IDS; do
         echo "Moving $id $DONE_OPTION_ID"
         gh api graphql -f query='
           mutation (
             $project: ID!
             $item: ID!
             $status_field: ID!
             $status_value: String!
           ) {
             set_status: updateProjectV2ItemFieldValue(input: {
               projectId: $project
               itemId: $item
               fieldId: $status_field
               value: {
                 singleSelectOptionId: $status_value
                 }
             }) {
               projectV2Item {
                 id
                 }
             }
             
           }' -f project=$PROJECT_ID -f item=$id -f status_field=$STATUS_FIELD_ID -f status_value=$DONE_OPTION_ID --silent
           done
    - name: Create discussion
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        DATE=$(date +'%d-%m-%Y')
        ITEMS=$(jq -s '.[]|.content | { .title + " #" + .number}' $HOME/items.json)
        BODY='
        # Release Log 
        ## Issues closed
        ${ITEMS}
        ## Commit SHA 
        To be inserted here..
        '
        gh api graphql -f query=' 
        mutation($date: String!, $repositoryId: ID!, $categoryId: ID!, $body: String!){
        createDiscussion(input: {repositoryId:$repositoryId , categoryId: $categoryId, body:$body, title: "Release $date"}) {

        # response type: CreateDiscussionPayload
         discussion {
           id
        }
        }}' -f date=$DATE -f repositoryId=${{github.repository_id}} -f categoryId=$DISCUSSION_CATEGORY_ID -f body=$BODY
