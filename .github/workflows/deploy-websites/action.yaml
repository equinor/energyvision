name: 'Deploy websites'
description: 'Steps needed to deploy all websites to Radix'
inputs:
  imageName:
    description: 'The path to where the image is to be copied'
    required: true
  projectId:
    description: 'Id of the sanity project'
    required: false
  datasetName:
    description: 'Name of dataset to be used for Sanity'
    required: true
  githubToken:
    description: 'GitHub token'
    required: true
  sanityApiToken:
    description: 'Sanity API token'
    required: true
  sanityPreviewSecret:
    description: 'Sanity Preview Secret'
    required: true
  algoliaAppId:
    description: 'AppID for Algolia'
    required: true
  environment:
    description: 'dev, preprod or prod'
    required: true
  algoliaApiKey:
    description: 'Api key for Algolia'
    required: false
  algoliaApiKeyServer:
    description: 'Api key for Algolia to be used server side'
    required: false
runs:
  using: 'composite'
  steps:
    - name: Checkout 🛎️
      uses: actions/checkout@v3
    - name: Set default image tag 🏷
      shell: bash
      id: set-default-image-tag
      run: |
        echo "IMAGE_TAG=$(echo ${GITHUB_REF##*/}-latest)" >> $GITHUB_ENV
        echo "IMAGE_TAG_SHA=$(git rev-parse --short ${GITHUB_SHA})" >> $GITHUB_ENV
    - name: Build web component ⚙️
      shell: bash
      id: build
      run: |
        docker build . \
          --cache-from ${{ inputs.imageName }}:${{ env.IMAGE_TAG}} \
          --build-arg ARG_SANITY_PROJECT_ID=${{ inputs.projectId }} \
          --build-arg ARG_SANITY_DATASET=${{ inputs.datasetName }} \
          --build-arg ARG_SANITY_API_TOKEN=${{ inputs.sanityApiToken }} \
          --build-arg ARG_SANITY_PREVIEW_SECRET=${{ inputs.sanityPreviewSecret }} \
          --build-arg ARG_ALGOLIA_APP_ID=${{ inputs.algoliaAppId }} \
          --build-arg ARG_ALGOLIA_SEARCH_API_KEY=${{ inputs.algoliaApiKey }} \
          --build-arg ARG_ALGOLIA_SEARCH_API_SERVER_KEY=${{ inputs.algoliaApiKeyServer }} \
          --build-arg ARG_ENV=${{ inputs.environment }} \
          --file web/Dockerfile \
          --tag ${{ inputs.imageName }}:${{ env.IMAGE_TAG }} \
          --tag ${{ inputs.imageName }}:${{ env.IMAGE_TAG_SHA }} \
          --build-arg BUILDKIT_INLINE_CACHE=1
    - name: Push the image to GHCR ☁
      shell: bash
      id: push-to-ghcr
      run: |
        echo "${{ inputs.githubToken }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        docker push ghcr.io/equinor/energyvision/web-${{ inputs.datasetName  }} --all-tags
    - name: Deploy API on Radix 🚀
      id: deploy
      uses: equinor/radix-github-actions@master
      with:
        args: >
          create job
          deploy
          --token-environment
          --context platform2
          -a equinor-web-sites
          -e ${{ inputs.environment }}
          -f
    - name: log-errors-to-slack 📄
      uses: act10ns/slack@v1
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
      if: failure()
