name: TEST - Build & Deploy global-test
on:
  workflow_dispatch:
jobs:
  check-code:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      DOCKER_BUILDKIT: 1
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3
      - name: Install pnpm üì¶
        id: install-pnpm
        uses: pnpm/action-setup@v2.0.0
        with:
          version: '^6.32.11'
      - name: Cache pnpm modules üíæ
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'pnpm'
      - name: Install dependencies üîß
        id: install-dependencies
        run: |
          pnpm install
          pnpm install --filter energy-vision-web
      - name: Run ESLint üîé
        id: lint
        run: |
          pnpm lint:web
      - name: Run tests üîç
        id: test
        run: |
          pnpm test --filter energy-vision-web
      - name: log-errors-to-slack üìÑ
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: failure()

  update-radix-config:
    needs: check-code
    runs-on: ubuntu-latest
    environment:
      name: test
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3
      - name: Set image tag üè∑
        shell: bash
        id: set-default-image-tag
        run: |
          echo "IMAGE_TAG_SHA=$(git rev-parse --short ${GITHUB_SHA})" >> $GITHUB_ENV
      - name: Checkout internal üõéÔ∏è
        id: checkout-internal
        uses: actions/checkout@v3
        with:
          repository: 'equinor/energyvision-internal'
          ref: main
          token: ${{ secrets.PAT }} # Replace with ssh as per https://stackoverflow.com/questions/60222741/github-actions-and-git-clone-issue
      - name: Modify radixconfig tag for preprod on main branch üóíÔ∏è
        if: github.ref == 'refs/heads/main'
        shell: bash
        id: modify-radix
        run: |
          # Install pre-requisite
          python -m pip install --user ruamel.yaml
          python ci/upgradeEnvironment.py web ${{ env.IMAGE_TAG_SHA }} ${{ secrets.ENV }}
          git config --global user.name 'github'
          git config --global user.email 'nilsml@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/equinor/energyvision-internal
          if [[ `git status --porcelain` ]]
          then
            git commit -am "üöÄ Deploy web to test with tag ${{ env.IMAGE_TAG_SHA }}" --allow-empty
            git pull --rebase origin main
            git push origin HEAD:main
          fi

      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: failure()

  deploy-global-test:
    needs: check-code
    runs-on: ubuntu-latest
    environment:
      name: test
      url: https://web-energyvision-test.radix.equinor.com/
    strategy:
      # The matrix approach is needed to re-use code created for satellites
      matrix:
        dataset: ['global-test']
    env:
      APP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.RADIX_MACHINE_USER_TOKEN }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      DOCKER_BUILDKIT: 1
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3
      - id: deploy-global
        uses: ./.github/workflows/deploy-websites/
        with:
          imageName: ghcr.io/equinor/energyvision/web-${{ matrix.dataset }}
          datasetName: ${{ matrix.dataset }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          sanityApiToken: ${{ secrets.SANITY_API_TOKEN }}
          sanityPreviewSecret: ${{ secrets.SANITY_PREVIEW_SECRET }}
          algoliaAppId: ${{ secrets.ALGOLIA_APP_ID }}
          algoliaApiKey: ${{ secrets.ALGOLIA_SEARCH_API_KEY }}
          algoliaApiKeyServer: ${{ secrets.ALGOLIA_SEARCH_API_SERVER_KEY }}
          environment: ${{ secrets.ENV }}
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: failure()
